# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*
tfplan
tfplan.*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Ignore lock files
.terraform.lock.hcl

# Ignore any local backup files
*.backup
*.backup.*

# Ignore any temporary files
*.tmp
*.temp

# Ignore log files
*.log

# Ignore OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Ignore IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# Ignore test artifacts
test-results/
coverage/
*.test

# Ignore Go build artifacts
*.exe
*.exe~
*.dll
*.so
*.dylib
*.test
*.out
go.work

# Ignore AWS credentials and configuration
.aws/
aws-credentials

# Ignore environment files
.env
.env.local
.env.*.local

# Ignore documentation build artifacts
docs/_build/
site/

# Ignore cost estimation reports
cost-report/
infracost-report.json

# Ignore security scan reports
terrascan-report.json
security-report/

# Ignore backup directories
backups/
*.bak

# Ignore any local configuration files
local.tf
local.tfvars 